using ForwardDiff, LinearAlgebra, Arpack, IterativeSolvers, Flux, Nabla



function f(x::Vector)
    randM = [0.9218149587286786 0.7740781447941656 0.946209958556574 0.2260070874537068 0.3687621617179997; 0.34806575588050004 0.7393548144987203 0.010506190569665508 0.6710819039919091 0.2516999150024839; 0.34122199583398327 0.13579426386757487 0.6809553785082956 0.5080532316502187 0.9069614700645277; 0.43851792438412374 0.9123570370348504 0.019843855104013652 0.13867037097666746 0.4989218106647102; 0.44175834796829827 0.19927060597813107 0.6876361785951024 0.5521661610078779 0.5244987926132738]
    fM = [(x ⋅ randM[:,i])*norm(randM[:,j]) for i in 1:5, j in 1:5]
    ev = eigen(fM).vectors
    difx = norm(x-ev[:,1])
end

g_f = x -> ForwardDiff.gradient(f, x)

g_f(rand(5))

function f2(x::Vector)
    randM = [0.9218149587286786 0.7740781447941656 0.946209958556574 0.2260070874537068 0.3687621617179997; 0.34806575588050004 0.7393548144987203 0.010506190569665508 0.6710819039919091 0.2516999150024839; 0.34122199583398327 0.13579426386757487 0.6809553785082956 0.5080532316502187 0.9069614700645277; 0.43851792438412374 0.9123570370348504 0.019843855104013652 0.13867037097666746 0.4989218106647102; 0.44175834796829827 0.19927060597813107 0.6876361785951024 0.5521661610078779 0.5244987926132738]
    fM = [(x ⋅ randM[:,i])*norm(randM[:,j]) for i in 1:5, j in 1:5]
    ev = svd(fM, full=true).U
    difx = norm(x-ev[:,1])
end


g_f2 = x -> ForwardDiff.gradient(f2, x)

g_f2(rand(5))

function f3(x::Vector)
    randM = [0.9218149587286786 0.7740781447941656 0.946209958556574 0.2260070874537068 0.3687621617179997; 0.34806575588050004 0.7393548144987203 0.010506190569665508 0.6710819039919091 0.2516999150024839; 0.34122199583398327 0.13579426386757487 0.6809553785082956 0.5080532316502187 0.9069614700645277; 0.43851792438412374 0.9123570370348504 0.019843855104013652 0.13867037097666746 0.4989218106647102; 0.44175834796829827 0.19927060597813107 0.6876361785951024 0.5521661610078779 0.5244987926132738]
    fM = [(x ⋅ randM[:,i])*norm(randM[:,j]) for i in 1:5, j in 1:5]
    evals, evecs = eigs(fM)
    evec1 = abs.(evecs[:,1])
    difx = norm(x-evec1)
end


g_f3 = x -> ForwardDiff.gradient(f3, x)
g_f3(rand(5))

function f4(x::Vector)
    randM = [0.9218149587286786 0.7740781447941656 0.946209958556574 0.2260070874537068 0.3687621617179997; 0.34806575588050004 0.7393548144987203 0.010506190569665508 0.6710819039919091 0.2516999150024839; 0.34122199583398327 0.13579426386757487 0.6809553785082956 0.5080532316502187 0.9069614700645277; 0.43851792438412374 0.9123570370348504 0.019843855104013652 0.13867037097666746 0.4989218106647102; 0.44175834796829827 0.19927060597813107 0.6876361785951024 0.5521661610078779 0.5244987926132738]
    fM = [(x ⋅ randM[:,i])*norm(randM[:,j]) for i in 1:5, j in 1:5]
    evecs, fact = svdl(fM)
    evec1 = abs.(evecs.U[:,1])
    difx = norm(x-evec1)
end


g_f4 = x -> ForwardDiff.gradient(f4, x)
g_f4(rand(5))


function f5(x::Vector)
    randM = [0.9218149587286786 0.7740781447941656 0.946209958556574 0.2260070874537068 0.3687621617179997; 0.34806575588050004 0.7393548144987203 0.010506190569665508 0.6710819039919091 0.2516999150024839; 0.34122199583398327 0.13579426386757487 0.6809553785082956 0.5080532316502187 0.9069614700645277; 0.43851792438412374 0.9123570370348504 0.019843855104013652 0.13867037097666746 0.4989218106647102; 0.44175834796829827 0.19927060597813107 0.6876361785951024 0.5521661610078779 0.5244987926132738]
    ev = eigen(randM).vectors
    difx = norm(x-ev[:,1])
end


g_f5 = x -> ForwardDiff.gradient(f5, x)
g_f5(rand(5))


function f6(x::Vector)
    randM = [0.9218149587286786 0.7740781447941656 0.946209958556574 0.2260070874537068 0.3687621617179997; 0.34806575588050004 0.7393548144987203 0.010506190569665508 0.6710819039919091 0.2516999150024839; 0.34122199583398327 0.13579426386757487 0.6809553785082956 0.5080532316502187 0.9069614700645277; 0.43851792438412374 0.9123570370348504 0.019843855104013652 0.13867037097666746 0.4989218106647102; 0.44175834796829827 0.19927060597813107 0.6876361785951024 0.5521661610078779 0.5244987926132738]
    fM = [(x ⋅ randM[:,i])*norm(randM[:,j]) for i in 1:5, j in 1:5]
    evecs, fact = svdl(fM)
    evec1 = abs.(evecs.U[:,1])
    difx = norm(x-evec1)
end


df6(x) = gradient(f6,x)[1]
df6(rand(5))


function f(x::Vector)
    M = kron(x,(x.^2)')
    vec_1 = eigs(M)[2][:,1] #Replace eigs by any other matrix decomposition method
    difx = norm(x-vec_1)
end

df(x) = gradient(f,x)[1] #using Flux.jl
g_f = x -> ForwardDiff.gradient(f, x) #using ForwardDiff.jl

df(rand(5)) #Fails
g_f(rand(5)) #Fails


